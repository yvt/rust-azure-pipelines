parameters:
  job_name: cargo_test              # Default job name
  job_displayName: Cargo test       # Default displayName
  job_dependsOn: []                 # Dependencies to for the job to start
  job_condition: true               # Job condition
  job_continueOnError: false        # Should other job still run even if this fail
  job_post-steps: []                # Custom steps running after job
  job_strategy:                     # Default strategy to test on Windows, MacOs and Linux.
    matrix:
      Linux:
        vmImage: ubuntu-16.04
        prepareScript: ""
      MacOS:
        vmImage: macOS-10.13
        prepareScript: ""
      Windows:
        vmImage: vs2017-win2016
        prepareScript: ""
  # global parameters
  rust: stable                # Version of rust. Could be [stable, beta, nightly, 1.31, nightly-2018-08-01 ... ]

  # parameters from `cargo test --help`
  all: false                  # Test all packages in the workspace
  features: ''                # Space-separated list of features to activate
  no-default-features: false  # Do not activate the `default` feature

  # parameters from libtest `cargo test -- --help`
  test_flags:
    include-ignored: false      # Run ignored and not ignored tests
    ignored: false              # Run only ignored tests
    exclude-should-panic: false # Excludes tests marked as should_panic
    test: false                 # Run tests and not benchmarks
    bench: false                # Run benchmarks instead of tests
    list: false                 # List all tests and benchmarks
    logfile: ''                 # Write logs to the specified file instead of stdout
    nocapture: false            # don't capture stdout/stderr of each task, allow
                                # printing directly
    test-threads: 0             # Number of threads used for running tests in parallel
    skip: []                    # Skip tests whose names contain FILTER (this flag can
                                # be used multiple times)
    quite: false                # Display one character per test instead of one line.
                                # Alias to --format=terse
    exact: false                # Exactly match filters rather than by substring
    color: ''                   # auto|always|never
                                # Configure coloring of output: auto = colorize if
                                # stdout is a tty and tests are run on serially
                                # (default); always = always colorize output; never =
                                # never colorize output;
    format: ''                  # pretty|terse|json
                                # Configure formatting of output: pretty = Print verbose
                                # output; terse = Display one character per test; json =
                                # Output a json document
    Z: []                       # unstable-options Enable nightly-only flags: unstable-options = Allow
                                # use of experimental features


jobs:
- job: ${{ parameters['job_name'] }}
  displayName: ${{ parameters['job_displayName'] }}
  condition: ${{ parameters['job_condition'] }}
  continueOnError: ${{ parameters['job_continueOnError'] }}
  dependsOn: ${{ parameters['job_dependsOn'] }}
  strategy: ${{ parameters['job_strategy'] }}
  pool:
    vmImage: $(vmImage)
  variables:
    check_flags: ''
    test_build_flags: ''
  steps:
  # Custom pre steps:
  - script: $(prepareScript)
    displayName: "Prepare"

  - template: ../steps/install-rust.yml
    parameters:
      rustup_toolchain: ${{ parameters.rust }}

  # *********************************************************************************************
  # parameters from `cargo test --help`

  - script: echo '##vso[task.setvariable variable=test_build_flags]$(test_build_flags) --all'
    enabled: ${{ parameters['all'] }}
    displayName: "[cli flag modify]Test all packages in the workspace"

  - script: echo '##vso[task.setvariable variable=test_build_flags]$(test_build_flags) --no-default-features'
    enabled: ${{ parameters['no-default-features'] }}
    displayName: "[cli flag modify]Do not activate the `default` feature"

  - bash: echo "##vso[task.setvariable variable=test_build_flags]$(test_build_flags) --features ${{ parameters['features'] }}"
    enabled: ${{ ne(parameters['features'], '') }}
    displayName: "[cli flag modify]Space-separated list of features to activate: ${{ parameters.test_build_flags['features'] }}"

  # *********************************************************************************************
  # parameters from libtest `cargo test -- --help`

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --include-ignored'
    enabled: ${{ parameters.test_flags['include-ignored'] }}
    displayName: "[cli flag modify]Run ignored and not ignored tests"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --ignored'
    enabled: ${{ parameters.test_flags['ignored'] }}
    displayName: "[cli flag modify]Run only ignored tests"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --exclude-should-panic'
    enabled: ${{ parameters.test_flags['exclude-should-panic'] }}
    displayName: "[cli flag modify]Excludes tests marked as should_panic"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --test'
    enabled: ${{ parameters.test_flags['test'] }}
    displayName: "[cli flag modify]Run tests and not benchmarks"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --bench'
    enabled: ${{ parameters.test_flags['bench'] }}
    displayName: "[cli flag modify]Run benchmarks instead of tests"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --list'
    enabled: ${{ parameters.test_flags['list'] }}
    displayName: "[cli flag modify]List all tests and benchmarks"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --logfile ${{ parameters.test_flags['logfile'] }}"
    enabled: ${{ ne(parameters.test_flags['logfile'], '') }}
    displayName: "[cli flag modify] Write logs to the specified file ${{ parameters.test_flags['logfile'] }}"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --nocapture'
    enabled: ${{ parameters.test_flags['nocapture'] }}
    displayName: "[cli flag modify]don't capture stdout/stderr of each task, allow printing it directly"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --test-threads ${{ parameters.test_flags['test-threads'] }}"
    enabled: ${{ ne(parameters.test_flags['test-threads'], 0) }}
    displayName: "[cli flag modify]Set number of threads used for running tests in parallel to ${{ parameters.test_flags['test-threads'] }}"

  - ${{ each s in parameters.test_flags['skip'] }}:
    - script: echo '##vso[task.setvariableV variable=check_flags]$(check_flags) --skip ${{ s }}'
      displayName: "[cli flag modify]Skip test using filter ${{ s }}"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --quite'
    enabled: ${{ parameters.test_flags['quite'] }}
    displayName: "[cli flag modify]Display one character per test instead of one line."

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --exact'
    enabled: ${{ parameters.test_flags['exact'] }}
    displayName: "[cli flag modify]Exactly match filters rather than by substring"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --color ${{ parameters.test_flags['color'] }}"
    enabled: ${{ ne(parameters.test_flags['color'], '') }}
    displayName: "[cli flag modify] Configure coloring of output: ${{ parameters.test_flags['color'] }}"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --format ${{ parameters.test_flags['format'] }}"
    enabled: ${{ ne(parameters.test_flags['format'], '') }}
    displayName: "[cli flag modify] Configure formatting of output: ${{ parameters.test_flags['format'] }}"

  - ${{ each z in parameters.test_flags['Z'] }}:
    - script: echo '##vso[task.setvariableV variable=check_flags]$(check_flags) --Z ${{ z }}'
      displayName: "[cli flag modify] unstable-option: ${{ z }}"

  # *********************************************************************************************
  - script: cargo test $(test_build_flags) -- $(check_flags)
    displayName: cargo test

  # Custom steps:
  - ${{ if parameters['job_post-steps'] }}:
    - ${{ parameters['job_post-steps'] }}

