parameters:
  # azure pipelines paramters
  job_name: cargo_clippy            # Default job name
  job_displayName: Cargo clippy     # Default displayName
  job_dependsOn: []                 # Dependencies to for the job to start
  job_condition: true               # Job condition
  job_continueOnError: false        # Treat error as warings?
  job_post-steps: []                # Custom steps running after job
  job_pre-steps: []                 # Custom steps before job start
  job_pool:
    vmImage: ubuntu-16.04           # Default vmImage

  # global parameters
  rust: stable                # Version of rust. Could be [stable, beta, nightly, 1.31, nightly-2018-08-01 ... ]

  # parameters for cargo clippy --help
  warn: []                    # Set lint warnings
  allow: []                   # Set lint allowed
  deny: []                    # Set lint denied
  forbid: []                  # Set lint forbidden

  # the copy of parameters from `cargo check` as suggest `cargo clippy --help`
  quiet: false                # No output printed to stdout
  package: []                 # Package(s) to check
  all: false                  # Check all packages in the workspace
  exclude: []                 # Exclude packages from the check
  lib: false                  # Check only this package's library
  bin: []                     # Check only the specified binary
  bins: false                 # Check all binaries
  example: []                 # Check only the specified example
  examples: false             # Check all examples
  test: []                    # Check only the specified test target
  tests: false                # Check all tests
  benche: []                  # Check only the specified bench target
  benches: false              # Check all benches
  all-targets: false          # Check all targets
  release: false              # Check artifacts in release mode, with optimizations
  profile: ""                 # Profile to build the selected target for
  features: ''                # Space-separated list of features to activate
  all-features: false         # Activate all available features
  no-default-features: false  # Do not activate the `default` feature
  target: ''                  # Check for the target triple
  target-dir: ''              # Directory for all generated artifacts
  manifest-path: ''           # Path to Cargo.toml
  message-format: ''          # Error format [default: human]  [possible values: human, json, short]
  verbose: false              # Use verbose output
  color: ''                   # Coloring: auto, always, never
  frozen: false               # Require Cargo.lock and cache are up to date
  locked: false               # Require Cargo.lock is up to date
  Z: []                       # Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details

jobs:
- job: ${{ parameters['job_name'] }}
  displayName: ${{ parameters['job_displayName'] }}
  condition: ${{ parameters['job_condition'] }}
  continueOnError: ${{ parameters['job_continueOnError'] }}
  dependsOn: ${{ parameters['job_dependsOn'] }}
  pool:
    vmImage: ${{ parameters.job_pool['vmImage'] }}
  variables:
    clippy_flags: ''
    check_flags: ''
  steps:
  # Custom pre steps:
  - ${{ if parameters['job_pre-steps'] }}:
    - ${{ parameters['job_pre-steps'] }}

  - template: ../steps/install-rust.yml
    parameters:
      rustup_toolchain: ${{ parameters.rust }}
      components:
        - clippy

  - ${{ each w in parameters['warn'] }}:
    - script: echo '##vso[task.setvariable variable=clippy_flags]$(clippy_flags) --warn ${{ w }}'
      displayName: "[cli flag modify] Add warning lint: ${{ w }}"

  - ${{ each a in parameters['allow'] }}:
    - script: echo '##vso[task.setvariable variable=clippy_flags]$(clippy_flags) --allow ${{ a }}'
      displayName: "[cli flag modify] Add lint allowed: ${{ a }}"

  - ${{ each d in parameters['deny'] }}:
    - script: echo '##vso[task.setvariable variable=clippy_flags]$(clippy_flags) --deny ${{ d }}'
      displayName: "[cli flag modify] Add lint denied: ${{ d }}"

  - ${{ each f in parameters['forbid'] }}:
    - script: echo '##vso[task.setvariable variable=clippy_flags]$(clippy_flags) --forbid ${{ f }}'
      displayName: "[cli flag modify] Add lint forbidden: ${{ f }}"

  # ##########################################################################################
  # Order of script modifying `check_flags` is the same as in paramters.
  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --quiet'
    enabled: ${{ parameters['quiet'] }}
    displayName: "[cli flag modify]No output printed to stdout"

  - ${{ each pkg in parameters['package'] }}:
    - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --package ${{ pkg }}'
      displayName: "[cli flag modify]Add package to check '${{ pkg }}'"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --all'
    enabled: ${{ parameters['all'] }}
    displayName: "[cli flag modify]Check all packages in the workspace"

  - ${{ each pkg in parameters['exclude'] }}:
    - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --exclude ${{ pkg }}'
      displayName: "[cli flag modify]Exclude package from check '${{ pkg }}'"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --lib'
    enabled: ${{ parameters['lib'] }}
    displayName: "[cli flag modify]Check only this package's library"

  - ${{ each bin in parameters['bin'] }}:
    - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --bin ${{ bin }}'
      displayName: "[cli flag modify]Add binary '${{ bin }}' to check"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --bins'
    enabled: ${{ parameters['bins'] }}
    displayName: "[cli flag modify]Check all binaries"

  - ${{ each exa in parameters['example'] }}:
    - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --example ${{ exa }}'
      displayName: "[cli flag modify]Add example '${{ exa }}' to check"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --examples'
    enabled: ${{ parameters['examples'] }}
    displayName: "[cli flag modify]check all examples"

  - ${{ each tes in parameters['test'] }}:
    - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --test ${{ tes }}'
      displayName: "[cli flag modify]Add test '${{ tes }}' to check"

  - ${{ each ben in parameters['benche'] }}:
    - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --benche ${{ ben }}'
      displayName: "[cli flag modify]Add benche '${{ ben }}' to check"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --benches'
    enabled: ${{ parameters['benches'] }}
    displayName: "[cli flag modify]check all benches"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --release'
    enabled: ${{ parameters['release'] }}
    displayName: "[cli flag modify]Set using release mode"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --profile ${{ parameters['profile'] }}"
    enabled: ${{ ne(parameters['profile'], '') }}
    displayName: "[cli flag modify]Set profile ('${{ parameters['profile'] }}') to build the selected target for"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --features ${{ parameters['features'] }}"
    enabled: ${{ ne(parameters['features'], '') }}
    displayName: "[cli flag modify]Space-separated list of features to activate: ${{ parameters['features'] }}"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --all-features'
    enabled: ${{ parameters['all-features'] }}
    displayName: "[cli flag modify]Activate all available features"

  - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --no-default-features'
    enabled: ${{ parameters['no-default-features'] }}
    displayName: "[cli flag modify]Do not activate the `default` feature"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --target ${{ parameters['target'] }}"
    enabled: ${{ ne(parameters['target'], '')  }}
    displayName: "[cli flag modify]Check for the target triple"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --target-dir ${{ parameters['target-dir'] }}"
    enabled: ${{ ne(parameters['target-dir'], '') }}
    displayName: "[cli flag modify]Directory for all generated artifacts"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --manifest-path ${{ parameters['manifest-path'] }}"
    enabled: ${{ ne(parameters['manifest-path'], '') }}
    displayName: "[cli flag modify]Set custom path to Cargo.toml"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --message-format ${{ parameters['message-format'] }}"
    enabled: ${{ ne(parameters['message-format'], '') }}
    displayName: "[cli flag modify]Set error format to ${{ parameters['message-format'] }}"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --verbose }}"
    enabled: ${{ parameters['verbose'] }}
    displayName: "[cli flag modify]use verbose output"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --color ${{ parameters['color'] }}"
    enabled: ${{ ne(parameters['color'], '') }}
    displayName: "[cli flag modify]Coloring: ${{ parameters['color'] }}"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --frozen }}"
    enabled: ${{ parameters['frozen'] }}
    displayName: "[cli flag modify]Require Cargo.lock and cache are up to date"

  - script: echo "##vso[task.setvariable variable=check_flags]$(check_flags) --locked }}"
    enabled: ${{ parameters['locked'] }}
    displayName: "[cli flag modify]Require Cargo.lock is up to date"

  - ${{ each z in parameters['Z'] }}:
    - script: echo '##vso[task.setvariable variable=check_flags]$(check_flags) --Z ${{ z }}'
      displayName: "[cli flag modify]Add Z flag ${{ z }}"
  # ##########################################################################################

  - script: cargo clippy $(check_flags) -- $(clippy_flags)
    displayName: Run clippy with custom flags

  # Custom steps:
  - ${{ if parameters['job_post-steps'] }}:
    - ${{ parameters['job_post-steps'] }}

